/*
 * StatusCake API
 *
 * Copyright (c) 2021 StatusCake
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.0-beta.1
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package statuscake

import (
	"encoding/json"
	"fmt"
)

// PagespeedTestLocationISO Testing location
type PagespeedTestLocationISO string

const (
	// PagespeedTestLocationISOAustralia a testing location based in Australia.
	PagespeedTestLocationISOAustralia PagespeedTestLocationISO = "AU"
	// PagespeedTestLocationISOCanada a testing location based in Canada.
	PagespeedTestLocationISOCanada PagespeedTestLocationISO = "CA"
	// PagespeedTestLocationISOGermany a testing location based in Germany.
	PagespeedTestLocationISOGermany PagespeedTestLocationISO = "DE"
	// PagespeedTestLocationISOIndia a testing location based in India.
	PagespeedTestLocationISOIndia PagespeedTestLocationISO = "IN"
	// PagespeedTestLocationISONetherlands a testing location based in the Netherlands.
	PagespeedTestLocationISONetherlands PagespeedTestLocationISO = "NL"
	// PagespeedTestLocationISOSingapore a testing location based in Singapore.
	PagespeedTestLocationISOSingapore PagespeedTestLocationISO = "SG"
	// PagespeedTestLocationISOUnitedKingdom a testing location based in the United Kingdom.
	PagespeedTestLocationISOUnitedKingdom PagespeedTestLocationISO = "UK"
	// PagespeedTestLocationISOAmerica a testing location based in the United States of America.
	PagespeedTestLocationISOAmerica PagespeedTestLocationISO = "US"
	// PagespeedTestLocationISOPrivate a private testing location.
	PagespeedTestLocationISOPrivate PagespeedTestLocationISO = "PRIVATE"
)

func (v *PagespeedTestLocationISO) UnmarshalJSON(src []byte) error {
	var value string
	if err := json.Unmarshal(src, &value); err != nil {
		return err
	}

	ev := PagespeedTestLocationISO(value)
	if !ev.Valid() {
		return fmt.Errorf("%+v is not a valid PagespeedTestLocationISO", value)
	}

	*v = ev
	return nil
}

// Valid determines if the value is valid.
func (v PagespeedTestLocationISO) Valid() bool {
	return v == PagespeedTestLocationISOAustralia || v == PagespeedTestLocationISOCanada || v == PagespeedTestLocationISOGermany || v == PagespeedTestLocationISOIndia || v == PagespeedTestLocationISONetherlands || v == PagespeedTestLocationISOSingapore || v == PagespeedTestLocationISOUnitedKingdom || v == PagespeedTestLocationISOAmerica || v == PagespeedTestLocationISOPrivate
}

// PagespeedTestLocationISOValues returns the values of PagespeedTestLocationISO
func PagespeedTestLocationISOValues() []string {
	return []string{
		"AU",
		"CA",
		"DE",
		"IN",
		"NL",
		"SG",
		"UK",
		"US",
		"PRIVATE",
	}
}
