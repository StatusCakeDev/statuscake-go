/*
 * StatusCake API
 *
 * Copyright (c) 2021 StatusCake
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.0-beta.1
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package statuscake

import (
	"encoding/json"
)

// SSLTestFlags struct for SSLTestFlags
type SSLTestFlags struct {
	// Whether the SSL certificate has Extended Validation (EV)
	IsExtended bool `json:"is_extended"`
	// Whether the SSL certificate has Perfect Forward Security enabled
	HasPFS bool `json:"has_pfs"`
	// Whether the SSL certificate has errors
	IsBroken bool `json:"is_broken"`
	// Whether the SSL certificate has expired
	IsExpired bool `json:"is_expired"`
	// Whether the SSL certificate is missing
	IsMissing bool `json:"is_missing"`
	// Whether the SSL certificate has been revoked by the certificate authority
	IsRevoked bool `json:"is_revoked"`
	// Whether the requested page has mixed content
	HasMixed bool `json:"has_mixed"`
	// Wherher follow redirects has been enabled for the SSL test
	FollowRedirects bool `json:"follow_redirects"`
}

// NewSSLTestFlags instantiates a new SSLTestFlags object.
// This constructor will assign default values to properties that have it
// defined, and makes sure properties required by API are set, but the set of
// arguments will change when the set of required properties is changed.
func NewSSLTestFlags(isExtended bool, hasPfs bool, isBroken bool, isExpired bool, isMissing bool, isRevoked bool, hasMixed bool, followRedirects bool) *SSLTestFlags {
	return &SSLTestFlags{
		IsExtended:      isExtended,
		HasPFS:          hasPfs,
		IsBroken:        isBroken,
		IsExpired:       isExpired,
		IsMissing:       isMissing,
		IsRevoked:       isRevoked,
		HasMixed:        hasMixed,
		FollowRedirects: followRedirects,
	}
}

func (o SSLTestFlags) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["is_extended"] = o.IsExtended
	}
	if true {
		toSerialize["has_pfs"] = o.HasPFS
	}
	if true {
		toSerialize["is_broken"] = o.IsBroken
	}
	if true {
		toSerialize["is_expired"] = o.IsExpired
	}
	if true {
		toSerialize["is_missing"] = o.IsMissing
	}
	if true {
		toSerialize["is_revoked"] = o.IsRevoked
	}
	if true {
		toSerialize["has_mixed"] = o.HasMixed
	}
	if true {
		toSerialize["follow_redirects"] = o.FollowRedirects
	}
	return json.Marshal(toSerialize)
}
