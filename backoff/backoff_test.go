/*
 * StatusCake API
 *
 * Copyright (c) 2022
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.1
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backoff_test

import (
	"testing"
	"time"

	"github.com/StatusCakeDev/statuscake-go/backoff"
)

func TestConstant(t *testing.T) {
	t.Run("returns a constant duration", func(t *testing.T) {
		b := backoff.Constant{
			BaseDelay: 6.0 * time.Second,
		}

		retries := 5

		expected := b.BaseDelay
		got := b.Backoff(retries)

		if expected != got {
			t.Errorf("expected: %s, got: %s", expected, got)
		}
	})
}

func TestExponential(t *testing.T) {
	b := backoff.Exponential{
		BaseDelay:  1.0 * time.Second,
		Multiplier: 2.0, // Exponential factor.
		Jitter:     0,   // To make test predictible.
		MaxDelay:   120 * time.Second,
	}

	tests := []struct {
		name     string
		idx      int
		expected time.Duration
	}{
		{
			name:     "returns the base delay for the initial index",
			idx:      0,
			expected: b.BaseDelay,
		},
		{
			name:     "returns the next duration in an exponential sequence",
			idx:      5,
			expected: time.Duration(32 * time.Second),
		},
		{
			name:     "returns the maximum delay when the calculated backoff exceeds the maximum",
			idx:      7,
			expected: b.MaxDelay,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := b.Backoff(tt.idx)
			if tt.expected != got {
				t.Errorf("expected: %s, got: %s", tt.expected, got)
			}
		})
	}
}

func TestLinear(t *testing.T) {
	b := backoff.Linear{
		BaseDelay: 1.0 * time.Second,
		Jitter:    0, // To make test predictible.
		MaxDelay:  120 * time.Second,
	}

	tests := []struct {
		name     string
		idx      int
		expected time.Duration
	}{
		{
			name:     "returns the base delay for the initial index",
			idx:      0,
			expected: b.BaseDelay,
		},
		{
			name:     "returns the next duration in a linear sequence",
			idx:      5,
			expected: time.Duration(6 * time.Second),
		},
		{
			name:     "returns the maximum delay when the calculated backoff exceeds the maximum",
			idx:      120,
			expected: b.MaxDelay,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := b.Backoff(tt.idx)
			if tt.expected != got {
				t.Errorf("expected: %s, got: %s", tt.expected, got)
			}
		})
	}
}
