/*
 * StatusCake API
 *
 * Copyright (c) 2022
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.0-beta.2
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package throttle

import (
	"context"
	"net/http"
)

// Limiter describes a common interface to describe the constraint on a
// request. If the constrain is satified then the request can continue.
type Limiter interface {
	Wait(context.Context) error
}

// LimiterFunc is an adapter to allow the use of functions without a receiver
// as limiters. If `f` is a function with the appropriate signature,
// LimiterFunc(f) is a Limiter that calls `f`.
type LimiterFunc func(context.Context) error

// Wait calls the underlying function reprsented by the receiver of this
// method.
func (f LimiterFunc) Wait(ctx context.Context) error {
	return f(ctx)
}

// Transport implements http.RoundTripper and throttles requests described by
// the constraints of one or more Limiter values.
type Transport struct {
	Transport http.RoundTripper // Used to make actual requests.
	limiter   Limiter
}

// New returns a RoundTripper that throttles HTTP requests.
func New(transport http.RoundTripper, l ...Limiter) *Transport {
	return &Transport{
		Transport: transport,
		limiter:   NewGroup(l...),
	}
}

// NewWithDefaultTransport returns a RoundTripper that throttles HTTP requests.
func NewWithDefaultTransport(l ...Limiter) *Transport {
	return New(http.DefaultTransport, l...)
}

// RoundTrip ensures requests are executed within the limiting constraints.
func (t *Transport) RoundTrip(r *http.Request) (*http.Response, error) {
	if err := t.limiter.Wait(r.Context()); err != nil {
		return nil, err
	}

	if t.Transport == nil {
		t.Transport = http.DefaultTransport
	}

	return t.Transport.RoundTrip(r)
}
