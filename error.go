/*
 * StatusCake API
 *
 * Copyright (c) 2021 StatusCake
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.0-beta.1
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package statuscake

// APIError represents an error returned from the API. This type abstracts the
// different payloads that can be returned from the API in response to an error
// which would otherwise add unnecessary compexity to the interface of this
// package.
type APIError struct {
	Status  int
	Message string              `json:"message,omitempty"`
	Errors  map[string][]string `json:"errors,omitempty"`

	// Wrap the parent error in case it is of any use.
	parent error
}

func NewAPIError(message string, parent error) APIError {
	return APIError{
		Message: message,
		parent:  parent,
	}
}

func (e APIError) Error() string {
	if e.parent != nil {
		return e.parent.Error() + ": " + e.Message
	}

	return e.Message
}

func (e APIError) Unwrap() error {
	return e.parent
}

// Errors returns the map of error messages contained in an APIError. If the
// error passed into the function cannot be asserted to be of type APIError
// then an empty map is returned.
func Errors(err error) map[string][]string {
	if e, ok := err.(APIError); ok {
		return e.Errors
	}

	return map[string][]string{}
}
