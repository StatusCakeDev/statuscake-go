/*
 * StatusCake API
 *
 * Copyright (c) 2023
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.2.0
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package statuscake

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var _ context.Context

// HeartbeatAPI describes the necessary methods to adhere to this interface.
type HeartbeatAPI interface {
	CreateHeartbeatTest(ctx context.Context) APICreateHeartbeatTestRequest
	CreateHeartbeatTestWithData(ctx context.Context, m map[string]interface{}) APICreateHeartbeatTestRequest
	CreateHeartbeatTestExecute(r APICreateHeartbeatTestRequest) (APIResponse, error)
	DeleteHeartbeatTest(ctx context.Context, testId string) APIDeleteHeartbeatTestRequest
	DeleteHeartbeatTestExecute(r APIDeleteHeartbeatTestRequest) error
	GetHeartbeatTest(ctx context.Context, testId string) APIGetHeartbeatTestRequest
	GetHeartbeatTestExecute(r APIGetHeartbeatTestRequest) (HeartbeatTestResponse, error)
	ListHeartbeatTests(ctx context.Context) APIListHeartbeatTestsRequest
	ListHeartbeatTestsExecute(r APIListHeartbeatTestsRequest) (HeartbeatTests, error)
	UpdateHeartbeatTest(ctx context.Context, testId string) APIUpdateHeartbeatTestRequest
	UpdateHeartbeatTestWithData(ctx context.Context, testId string, m map[string]interface{}) APIUpdateHeartbeatTestRequest
	UpdateHeartbeatTestExecute(r APIUpdateHeartbeatTestRequest) error
}

// HeartbeatService Heartbeat service.
type HeartbeatService service

// APICreateHeartbeatTestRequest represents a request type.
type APICreateHeartbeatTestRequest struct {
	ctx           context.Context
	APIService    HeartbeatAPI
	name          *string
	period        *int32
	contactGroups *[]string
	host          *string
	paused        *bool
	tags          *[]string
}

// Name sets name on the request type.
func (r APICreateHeartbeatTestRequest) Name(name string) APICreateHeartbeatTestRequest {
	r.name = &name
	return r
}

// Period sets period on the request type.
func (r APICreateHeartbeatTestRequest) Period(period int32) APICreateHeartbeatTestRequest {
	r.period = &period
	return r
}

// ContactGroups sets contactGroups on the request type.
func (r APICreateHeartbeatTestRequest) ContactGroups(contactGroups []string) APICreateHeartbeatTestRequest {
	r.contactGroups = &contactGroups
	return r
}

// Host sets host on the request type.
func (r APICreateHeartbeatTestRequest) Host(host string) APICreateHeartbeatTestRequest {
	r.host = &host
	return r
}

// Paused sets paused on the request type.
func (r APICreateHeartbeatTestRequest) Paused(paused bool) APICreateHeartbeatTestRequest {
	r.paused = &paused
	return r
}

// Tags sets tags on the request type.
func (r APICreateHeartbeatTestRequest) Tags(tags []string) APICreateHeartbeatTestRequest {
	r.tags = &tags
	return r
}

// Execute executes the request.
func (r APICreateHeartbeatTestRequest) Execute() (APIResponse, error) {
	return r.APIService.CreateHeartbeatTestExecute(r)
}

// CreateHeartbeatTest Create a heartbeat check.
func (a *HeartbeatService) CreateHeartbeatTest(ctx context.Context) APICreateHeartbeatTestRequest {
	return APICreateHeartbeatTestRequest{
		ctx:        ctx,
		APIService: a,
	}
}

// CreateHeartbeatTestWithData Create a heartbeat check.
// The use of this method is discouraged as it does not provide the level of
// type safety afforded by the field methods on the request type.
func (a *HeartbeatService) CreateHeartbeatTestWithData(ctx context.Context, m map[string]interface{}) APICreateHeartbeatTestRequest {
	r := a.CreateHeartbeatTest(ctx)

	if prop, ok := m["name"].(string); ok {
		r.name = &prop
	}

	if prop, ok := m["period"].(int32); ok {
		r.period = &prop
	}

	if prop, ok := m["contact_groups"].([]string); ok {
		r.contactGroups = &prop
	}

	if prop, ok := m["host"].(string); ok {
		r.host = &prop
	}

	if prop, ok := m["paused"].(bool); ok {
		r.paused = &prop
	}

	if prop, ok := m["tags"].([]string); ok {
		r.tags = &prop
	}

	return r
}

// Execute executes the request.
func (a *HeartbeatService) CreateHeartbeatTestExecute(r APICreateHeartbeatTestRequest) (APIResponse, error) {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
		returnValue          APIResponse
	)

	basePath, err := a.client.ServerURLWithContext(r.ctx, "HeartbeatService.CreateHeartbeatTest")
	if err != nil {
		return returnValue, err
	}

	requestPath := basePath + "/heartbeat"

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	if r.name == nil {
		return returnValue, errorf("name is required and must be specified")
	}

	if r.period == nil {
		return returnValue, errorf("period is required and must be specified")
	}
	if *r.period < 30 {
		return returnValue, errorf("period must be greater than 30")
	}
	if *r.period > 172800 {
		return returnValue, errorf("period must be less than 172800")
	}

	// Determine the Content-Type header.
	contentTypes := []string{"application/x-www-form-urlencoded"}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	formParams.Add("name", parameterToString(*r.name))
	formParams.Add("period", parameterToString(*r.period))

	if r.contactGroups != nil {
		// Explicity empty array. This indictes the consumer intended to pass an
		// empty value and therefore likely want to nullify the field.
		if len(*r.contactGroups) == 0 {
			formParams.Add("contact_groups[]", "")
		}
		for _, val := range *r.contactGroups {
			formParams.Add("contact_groups[]", parameterToString(val))
		}
	}

	if r.host != nil {
		formParams.Add("host", parameterToString(*r.host))
	}

	if r.paused != nil {
		formParams.Add("paused", parameterToString(*r.paused))
	}

	if r.tags != nil {
		// Explicity empty array. This indictes the consumer intended to pass an
		// empty value and therefore likely want to nullify the field.
		if len(*r.tags) == 0 {
			formParams.Add("tags[]", "")
		}
		for _, val := range *r.tags {
			formParams.Add("tags[]", parameterToString(val))
		}
	}
	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodPost, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return returnValue, err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return returnValue, err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return returnValue, err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return returnValue, APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return returnValue, v
	}

	if err := a.client.decode(&returnValue, responseBody, responseContentType); err != nil {
		return returnValue, APIError{
			Status:  res.StatusCode,
			Message: "failed to deserialise response body",
			parent:  err,
		}
	}

	return returnValue, nil
}

// APIDeleteHeartbeatTestRequest represents a request type.
type APIDeleteHeartbeatTestRequest struct {
	ctx        context.Context
	APIService HeartbeatAPI
	testId     string
}

// Execute executes the request.
func (r APIDeleteHeartbeatTestRequest) Execute() error {
	return r.APIService.DeleteHeartbeatTestExecute(r)
}

// DeleteHeartbeatTest Delete a heartbeat check.
func (a *HeartbeatService) DeleteHeartbeatTest(ctx context.Context, testId string) APIDeleteHeartbeatTestRequest {
	return APIDeleteHeartbeatTestRequest{
		ctx:        ctx,
		APIService: a,
		testId:     testId,
	}
}

// DeleteHeartbeatTestWithData Delete a heartbeat check.
// The use of this method is discouraged as it does not provide the level of
// type safety afforded by the field methods on the request type.
func (a *HeartbeatService) DeleteHeartbeatTestWithData(ctx context.Context, testId string, m map[string]interface{}) APIDeleteHeartbeatTestRequest {
	r := a.DeleteHeartbeatTest(ctx, testId)
	return r
}

// Execute executes the request.
func (a *HeartbeatService) DeleteHeartbeatTestExecute(r APIDeleteHeartbeatTestRequest) error {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
	)

	basePath, err := a.client.ServerURLWithContext(r.ctx, "HeartbeatService.DeleteHeartbeatTest")
	if err != nil {
		return err
	}

	requestPath := basePath + "/heartbeat/{test_id}"
	requestPath = strings.Replace(requestPath, "{"+"test_id"+"}", url.PathEscape(parameterToString(r.testId)), -1)

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	// Determine the Content-Type header.
	contentTypes := []string{}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodDelete, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return v
	}

	return nil
}

// APIGetHeartbeatTestRequest represents a request type.
type APIGetHeartbeatTestRequest struct {
	ctx        context.Context
	APIService HeartbeatAPI
	testId     string
}

// Execute executes the request.
func (r APIGetHeartbeatTestRequest) Execute() (HeartbeatTestResponse, error) {
	return r.APIService.GetHeartbeatTestExecute(r)
}

// GetHeartbeatTest Retrieve a heartbeat check.
func (a *HeartbeatService) GetHeartbeatTest(ctx context.Context, testId string) APIGetHeartbeatTestRequest {
	return APIGetHeartbeatTestRequest{
		ctx:        ctx,
		APIService: a,
		testId:     testId,
	}
}

// GetHeartbeatTestWithData Retrieve a heartbeat check.
// The use of this method is discouraged as it does not provide the level of
// type safety afforded by the field methods on the request type.
func (a *HeartbeatService) GetHeartbeatTestWithData(ctx context.Context, testId string, m map[string]interface{}) APIGetHeartbeatTestRequest {
	r := a.GetHeartbeatTest(ctx, testId)
	return r
}

// Execute executes the request.
func (a *HeartbeatService) GetHeartbeatTestExecute(r APIGetHeartbeatTestRequest) (HeartbeatTestResponse, error) {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
		returnValue          HeartbeatTestResponse
	)

	basePath, err := a.client.ServerURLWithContext(r.ctx, "HeartbeatService.GetHeartbeatTest")
	if err != nil {
		return returnValue, err
	}

	requestPath := basePath + "/heartbeat/{test_id}"
	requestPath = strings.Replace(requestPath, "{"+"test_id"+"}", url.PathEscape(parameterToString(r.testId)), -1)

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	// Determine the Content-Type header.
	contentTypes := []string{}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodGet, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return returnValue, err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return returnValue, err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return returnValue, err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return returnValue, APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return returnValue, v
	}

	if err := a.client.decode(&returnValue, responseBody, responseContentType); err != nil {
		return returnValue, APIError{
			Status:  res.StatusCode,
			Message: "failed to deserialise response body",
			parent:  err,
		}
	}

	return returnValue, nil
}

// APIListHeartbeatTestsRequest represents a request type.
type APIListHeartbeatTestsRequest struct {
	ctx        context.Context
	APIService HeartbeatAPI
	status     *string
	page       *int32
	limit      *int32
	tags       *string
	matchany   *bool
	nouptime   *bool
}

// Status sets status on the request type.
func (r APIListHeartbeatTestsRequest) Status(status string) APIListHeartbeatTestsRequest {
	r.status = &status
	return r
}

// Page sets page on the request type.
func (r APIListHeartbeatTestsRequest) Page(page int32) APIListHeartbeatTestsRequest {
	r.page = &page
	return r
}

// Limit sets limit on the request type.
func (r APIListHeartbeatTestsRequest) Limit(limit int32) APIListHeartbeatTestsRequest {
	r.limit = &limit
	return r
}

// Tags sets tags on the request type.
func (r APIListHeartbeatTestsRequest) Tags(tags string) APIListHeartbeatTestsRequest {
	r.tags = &tags
	return r
}

// Matchany sets matchany on the request type.
func (r APIListHeartbeatTestsRequest) Matchany(matchany bool) APIListHeartbeatTestsRequest {
	r.matchany = &matchany
	return r
}

// Nouptime sets nouptime on the request type.
func (r APIListHeartbeatTestsRequest) Nouptime(nouptime bool) APIListHeartbeatTestsRequest {
	r.nouptime = &nouptime
	return r
}

// Execute executes the request.
func (r APIListHeartbeatTestsRequest) Execute() (HeartbeatTests, error) {
	return r.APIService.ListHeartbeatTestsExecute(r)
}

// ListHeartbeatTests Get all heartbeat checks.
func (a *HeartbeatService) ListHeartbeatTests(ctx context.Context) APIListHeartbeatTestsRequest {
	return APIListHeartbeatTestsRequest{
		ctx:        ctx,
		APIService: a,
	}
}

// ListHeartbeatTestsWithData Get all heartbeat checks.
// The use of this method is discouraged as it does not provide the level of
// type safety afforded by the field methods on the request type.
func (a *HeartbeatService) ListHeartbeatTestsWithData(ctx context.Context, m map[string]interface{}) APIListHeartbeatTestsRequest {
	r := a.ListHeartbeatTests(ctx)
	return r
}

// Execute executes the request.
func (a *HeartbeatService) ListHeartbeatTestsExecute(r APIListHeartbeatTestsRequest) (HeartbeatTests, error) {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
		returnValue          HeartbeatTests
	)

	basePath, err := a.client.ServerURLWithContext(r.ctx, "HeartbeatService.ListHeartbeatTests")
	if err != nil {
		return returnValue, err
	}

	requestPath := basePath + "/heartbeat"

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	if r.status != nil {
		queryParams.Add("status", parameterToString(*r.status))
	}
	if r.page != nil {
		queryParams.Add("page", parameterToString(*r.page))
	}
	if r.limit != nil {
		queryParams.Add("limit", parameterToString(*r.limit))
	}
	if r.tags != nil {
		queryParams.Add("tags", parameterToString(*r.tags))
	}
	if r.matchany != nil {
		queryParams.Add("matchany", parameterToString(*r.matchany))
	}
	if r.nouptime != nil {
		queryParams.Add("nouptime", parameterToString(*r.nouptime))
	}
	// Determine the Content-Type header.
	contentTypes := []string{}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodGet, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return returnValue, err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return returnValue, err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return returnValue, err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return returnValue, APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return returnValue, v
	}

	if err := a.client.decode(&returnValue, responseBody, responseContentType); err != nil {
		return returnValue, APIError{
			Status:  res.StatusCode,
			Message: "failed to deserialise response body",
			parent:  err,
		}
	}

	return returnValue, nil
}

// APIUpdateHeartbeatTestRequest represents a request type.
type APIUpdateHeartbeatTestRequest struct {
	ctx           context.Context
	APIService    HeartbeatAPI
	testId        string
	name          *string
	period        *int32
	contactGroups *[]string
	host          *string
	paused        *bool
	tags          *[]string
}

// Name sets name on the request type.
func (r APIUpdateHeartbeatTestRequest) Name(name string) APIUpdateHeartbeatTestRequest {
	r.name = &name
	return r
}

// Period sets period on the request type.
func (r APIUpdateHeartbeatTestRequest) Period(period int32) APIUpdateHeartbeatTestRequest {
	r.period = &period
	return r
}

// ContactGroups sets contactGroups on the request type.
func (r APIUpdateHeartbeatTestRequest) ContactGroups(contactGroups []string) APIUpdateHeartbeatTestRequest {
	r.contactGroups = &contactGroups
	return r
}

// Host sets host on the request type.
func (r APIUpdateHeartbeatTestRequest) Host(host string) APIUpdateHeartbeatTestRequest {
	r.host = &host
	return r
}

// Paused sets paused on the request type.
func (r APIUpdateHeartbeatTestRequest) Paused(paused bool) APIUpdateHeartbeatTestRequest {
	r.paused = &paused
	return r
}

// Tags sets tags on the request type.
func (r APIUpdateHeartbeatTestRequest) Tags(tags []string) APIUpdateHeartbeatTestRequest {
	r.tags = &tags
	return r
}

// Execute executes the request.
func (r APIUpdateHeartbeatTestRequest) Execute() error {
	return r.APIService.UpdateHeartbeatTestExecute(r)
}

// UpdateHeartbeatTest Update a heartbeat check.
func (a *HeartbeatService) UpdateHeartbeatTest(ctx context.Context, testId string) APIUpdateHeartbeatTestRequest {
	return APIUpdateHeartbeatTestRequest{
		ctx:        ctx,
		APIService: a,
		testId:     testId,
	}
}

// UpdateHeartbeatTestWithData Update a heartbeat check.
// The use of this method is discouraged as it does not provide the level of
// type safety afforded by the field methods on the request type.
func (a *HeartbeatService) UpdateHeartbeatTestWithData(ctx context.Context, testId string, m map[string]interface{}) APIUpdateHeartbeatTestRequest {
	r := a.UpdateHeartbeatTest(ctx, testId)

	if prop, ok := m["name"].(string); ok {
		r.name = &prop
	}

	if prop, ok := m["period"].(int32); ok {
		r.period = &prop
	}

	if prop, ok := m["contact_groups"].([]string); ok {
		r.contactGroups = &prop
	}

	if prop, ok := m["host"].(string); ok {
		r.host = &prop
	}

	if prop, ok := m["paused"].(bool); ok {
		r.paused = &prop
	}

	if prop, ok := m["tags"].([]string); ok {
		r.tags = &prop
	}

	return r
}

// Execute executes the request.
func (a *HeartbeatService) UpdateHeartbeatTestExecute(r APIUpdateHeartbeatTestRequest) error {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
	)

	basePath, err := a.client.ServerURLWithContext(r.ctx, "HeartbeatService.UpdateHeartbeatTest")
	if err != nil {
		return err
	}

	requestPath := basePath + "/heartbeat/{test_id}"
	requestPath = strings.Replace(requestPath, "{"+"test_id"+"}", url.PathEscape(parameterToString(r.testId)), -1)

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	// Determine the Content-Type header.
	contentTypes := []string{"application/x-www-form-urlencoded"}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	if r.name != nil {
		formParams.Add("name", parameterToString(*r.name))
	}

	if r.period != nil {
		formParams.Add("period", parameterToString(*r.period))
	}

	if r.contactGroups != nil {
		// Explicity empty array. This indictes the consumer intended to pass an
		// empty value and therefore likely want to nullify the field.
		if len(*r.contactGroups) == 0 {
			formParams.Add("contact_groups[]", "")
		}
		for _, val := range *r.contactGroups {
			formParams.Add("contact_groups[]", parameterToString(val))
		}
	}

	if r.host != nil {
		formParams.Add("host", parameterToString(*r.host))
	}

	if r.paused != nil {
		formParams.Add("paused", parameterToString(*r.paused))
	}

	if r.tags != nil {
		// Explicity empty array. This indictes the consumer intended to pass an
		// empty value and therefore likely want to nullify the field.
		if len(*r.tags) == 0 {
			formParams.Add("tags[]", "")
		}
		for _, val := range *r.tags {
			formParams.Add("tags[]", parameterToString(val))
		}
	}
	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodPut, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return v
	}

	return nil
}
