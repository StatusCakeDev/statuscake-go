//go:build consumer
// +build consumer

/*
 * StatusCake API
 *
 * Copyright (c) 2022
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.0-beta.2
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package statuscake_test

import (
	"errors"
	"fmt"
	"os"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/pact-foundation/pact-go/v2/consumer"
	"github.com/pact-foundation/pact-go/v2/matchers"

	"github.com/StatusCakeDev/statuscake-go"
	"github.com/StatusCakeDev/statuscake-go/credentials"
)

var mockProvider *consumer.HTTPMockProviderV3

func TestMain(m *testing.M) {
	var err error
	mockProvider, err = consumer.NewV3Pact(consumer.MockHTTPProviderConfig{
		Consumer: "statuscake-go",
		Provider: "statuscake",
	})
	if err != nil {
		panic("failed to create mock provider")
	}
	os.Exit(m.Run())
}

func executeTest(t *testing.T, integrationTest func(*statuscake.Client) error) {
	err := mockProvider.ExecuteTest(t, func(cfg consumer.MockServerConfig) error {
		bearer := credentials.NewBearerWithStaticToken("123456789")
		client := statuscake.NewClient(
			statuscake.WithRequestCredentials(bearer),
			statuscake.WithHost(fmt.Sprintf("http://%s:%d", cfg.Host, cfg.Port)),
		)

		return integrationTest(client)
	})

	if err != nil {
		t.Error(err)
	}
}

// equal is a wrapper around Google go-cmp which mitigates issues surrounding
// equality when using `relfect.DeepEqual`.
func equal(got, expected interface{}) error {
	if diff := cmp.Diff(got, expected, cmp.AllowUnexported(statuscake.APIError{})); diff != "" {
		return errors.New(diff)
	}
	return nil
}

// Status is a custom matcher for status fileds that can be either up or down.
func Status() matchers.Matcher {
	return matchers.Regex("up", "(up|down)")
}
