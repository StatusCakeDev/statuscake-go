/*
 * StatusCake API
 *
 * Copyright (c) 2022
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.0-beta.1
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package statuscake_test

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"net/http/httptest"
	"net/url"
	"testing"

	"github.com/google/go-cmp/cmp"

	"github.com/StatusCakeDev/statuscake-go"
)

func createTestEndpoint(h http.HandlerFunc) (*httptest.Server, *statuscake.Client) {
	server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		h.ServeHTTP(w, r)
	}))

	// Create a StatusCake client using the above server as the host.
	client := statuscake.NewClient(
		statuscake.WithHost(server.URL),
		statuscake.WithHTTPClient(server.Client()),
	)

	return server, client
}

func mustParse(t *testing.T, r *http.Request) url.Values {
	body, err := ioutil.ReadAll(r.Body)
	if err != nil {
		t.Fatal("failed to read request body")
	}

	v, err := url.ParseQuery(string(body))
	if err != nil {
		t.Fatal("failed to parse request body")
	}

	return v
}

func mustRead(t *testing.T, f string) []byte {
	j, err := ioutil.ReadFile(f)
	if err != nil {
		t.Fatal("failed to read JSON file")
	}
	return j
}

// expectEqual is a wrapper around Google go-cmp which mitigates issues
// surrounding equality when using `relfect.DeepEqual`.
func expectEqual(t *testing.T, got, expected interface{}) {
	if diff := cmp.Diff(got, expected, cmp.AllowUnexported(statuscake.APIError{})); diff != "" {
		fmt.Println(diff)
		t.Fail()
	}
}
