/*
 * StatusCake API
 *
 * Copyright (c) 2021 StatusCake
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.0-beta.1
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package statuscake

import (
	"encoding/json"
)

// PagespeedTest struct for PagespeedTest
type PagespeedTest struct {
	// Pagespeed test ID
	ID string `json:"id"`
	// Whether the test should be run
	Paused bool `json:"paused"`
	// Name of the test
	Name string `json:"name"`
	// URL or IP address of the website under test
	WebsiteURL string `json:"website_url"`
	// Assigned server where tests will be run
	Location    string                   `json:"location"`
	LocationISO PagespeedTestLocationISO `json:"location_iso"`
	CheckRate   PagespeedTestCheckRate   `json:"check_rate"`
	// List of contact group IDs
	ContactGroups []string `json:"contact_groups"`
	// An alert will be sent if the size of the page is larger than this value (kb). A value of 0 prevents alerts being sent.
	AlertBigger int32 `json:"alert_bigger"`
	// An alert will be sent if the load time of the page exceeds this value (ms). A value of 0 prevents alerts being sent
	AlertSlower int32 `json:"alert_slower"`
	// An alert will be sent if the size of the page is smaller than this value (kb). A value of 0 prevents alerts being sent
	AlertSmaller int32               `json:"alert_smaller"`
	LatestStats  *PagespeedTestStats `json:"latest_stats,omitempty"`
}

// NewPagespeedTest instantiates a new PagespeedTest object.
// This constructor will assign default values to properties that have it
// defined, and makes sure properties required by API are set, but the set of
// arguments will change when the set of required properties is changed.
func NewPagespeedTest(id string, paused bool, name string, websiteUrl string, location string, locationIso PagespeedTestLocationISO, checkRate PagespeedTestCheckRate, contactGroups []string, alertBigger int32, alertSlower int32, alertSmaller int32) *PagespeedTest {
	return &PagespeedTest{
		ID:            id,
		Paused:        paused,
		Name:          name,
		WebsiteURL:    websiteUrl,
		Location:      location,
		LocationISO:   locationIso,
		CheckRate:     checkRate,
		ContactGroups: contactGroups,
		AlertBigger:   alertBigger,
		AlertSlower:   alertSlower,
		AlertSmaller:  alertSmaller,
	}
}

func (o PagespeedTest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.ID
	}
	if true {
		toSerialize["paused"] = o.Paused
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["website_url"] = o.WebsiteURL
	}
	if true {
		toSerialize["location"] = o.Location
	}
	if true {
		toSerialize["location_iso"] = o.LocationISO
	}
	if true {
		toSerialize["check_rate"] = o.CheckRate
	}
	if true {
		toSerialize["contact_groups"] = o.ContactGroups
	}
	if true {
		toSerialize["alert_bigger"] = o.AlertBigger
	}
	if true {
		toSerialize["alert_slower"] = o.AlertSlower
	}
	if true {
		toSerialize["alert_smaller"] = o.AlertSmaller
	}
	if o.LatestStats != nil {
		toSerialize["latest_stats"] = o.LatestStats
	}
	return json.Marshal(toSerialize)
}
