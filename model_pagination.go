/*
 * StatusCake API
 *
 * Copyright (c) 2022
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.1
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package statuscake

import (
	"encoding/json"
)

// Pagination struct for Pagination
type Pagination struct {
	// The current page of results
	Page int32 `json:"page"`
	// The number of results per page
	PerPage int32 `json:"per_page"`
	// The total number of pages
	PageCount int32 `json:"page_count"`
	// The total number of results
	TotalCount int32 `json:"total_count"`
}

// NewPagination instantiates a new Pagination object.
// This constructor will assign default values to properties that have it
// defined, and makes sure properties required by API are set, but the set of
// arguments will change when the set of required properties is changed.
func NewPagination(page int32, perPage int32, pageCount int32, totalCount int32) *Pagination {
	return &Pagination{
		Page:       page,
		PerPage:    perPage,
		PageCount:  pageCount,
		TotalCount: totalCount,
	}
}

// MarshalJSON serialises data in the struct to JSON.
func (o Pagination) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["page"] = o.Page
	}
	if true {
		toSerialize["per_page"] = o.PerPage
	}
	if true {
		toSerialize["page_count"] = o.PageCount
	}
	if true {
		toSerialize["total_count"] = o.TotalCount
	}
	return json.Marshal(toSerialize)
}
