//go:build consumer
// +build consumer

/*
 * StatusCake API
 *
 * Copyright (c) 2022
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.0
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package statuscake_test

import (
	"context"
	"net/http"
	"testing"

	"github.com/pact-foundation/pact-go/v2/matchers"
	. "github.com/pact-foundation/pact-go/v2/sugar"

	"github.com/StatusCakeDev/statuscake-go"
)

func TestCreateContactGroup(t *testing.T) {
	t.Run("returns a created status on success", func(t *testing.T) {
		mockProvider.
			AddInteraction().
			UponReceiving("A request to create a valid contact group").
			WithRequest(http.MethodPost, S("/v1/contact-groups")).
			WithHeaders(matchers.HeadersMatcher{
				"Accept":        []Matcher{S("application/json")},
				"Authorization": []Matcher{S("Bearer 123456789")},
				"Content-Type":  []Matcher{S("application/x-www-form-urlencoded")},
			}).
			WithBody("application/x-www-form-urlencoded", []byte(
				"email_addresses%5B%5D=johnsmith%40example.com&"+
					"email_addresses%5B%5D=janesmith%40example.com&"+
					"integrations%5B%5D=1&"+
					"integrations%5B%5D=2&"+
					"integrations%5B%5D=3&"+
					"mobile_numbers%5B%5D=447712345678&"+
					"mobile_numbers%5B%5D=447987462344&"+
					"name=Operations+Team&"+
					"ping_url=https%3A%2F%2Fping.example.com",
			)).
			WillRespondWith(http.StatusCreated).
			WithHeader("Content-Type", S("application/json")).
			WithJSONBody(Map{
				"data": matchers.StructMatcher{
					"new_id": Like("1"),
				},
			})

		executeTest(t, func(c *statuscake.Client) error {
			res, _ := c.CreateContactGroup(context.Background()).
				Name("Operations Team").
				EmailAddresses([]string{
					"johnsmith@example.com",
					"janesmith@example.com",
				}).
				Integrations([]string{
					"1",
					"2",
					"3",
				}).
				MobileNumbers([]string{
					"447712345678",
					"447987462344",
				}).
				PingURL("https://ping.example.com").
				Execute()

			return equal(res.Data.NewID, "1")
		})
	})

	t.Run("returns an error if the request fails", func(t *testing.T) {
		mockProvider.
			AddInteraction().
			UponReceiving("A request to create an invalid contact group").
			WithRequest(http.MethodPost, S("/v1/contact-groups")).
			WithHeaders(matchers.HeadersMatcher{
				"Accept":        []Matcher{S("application/json")},
				"Authorization": []Matcher{S("Bearer 123456789")},
				"Content-Type":  []Matcher{S("application/x-www-form-urlencoded")},
			}).
			WithBody("application/x-www-form-urlencoded", []byte(
				"name=Operations+Team&"+
					"ping_url=this%2Cis%2Cnot%2Cvalid",
			)).
			WillRespondWith(http.StatusBadRequest).
			WithHeader("Content-Type", S("application/json")).
			WithJSONBody(Map{
				"message": Like("The provided parameters are invalid. Check the errors output for detailed information."),
				"errors": matchers.StructMatcher{
					"ping_url": EachLike("Ping Url is not a valid URL", 1),
				},
			})

		executeTest(t, func(c *statuscake.Client) error {
			_, err := c.CreateContactGroup(context.Background()).
				Name("Operations Team").
				PingURL("this,is,not,valid").
				Execute()

			return equal(err, statuscake.APIError{
				Status:  http.StatusBadRequest,
				Message: "The provided parameters are invalid. Check the errors output for detailed information.",
				Errors: map[string][]string{
					"ping_url": []string{"Ping Url is not a valid URL"},
				},
			})
		})
	})
}

func TestDeleteContactGroup(t *testing.T) {
	t.Run("returns a no content status on success", func(t *testing.T) {
		mockProvider.
			AddInteraction().
			Given(ProviderStateV3{
				Name: "An existing contact group",
			}).
			UponReceiving("A request to delete a contact group").
			WithRequest(http.MethodDelete, FromProviderState("/v1/contact-groups/${id}", "/v1/contact-groups/1")).
			WithHeaders(matchers.HeadersMatcher{
				"Accept":        []Matcher{S("application/json")},
				"Authorization": []Matcher{S("Bearer 123456789")},
			}).
			WillRespondWith(http.StatusNoContent)

		executeTest(t, func(c *statuscake.Client) error {
			return c.DeleteContactGroup(context.Background(), "1").Execute()
		})
	})

	t.Run("returns an error when the contact group does not exist", func(t *testing.T) {
		mockProvider.
			AddInteraction().
			UponReceiving("A request to delete a contact group").
			WithRequest(http.MethodDelete, S("/v1/contact-groups/2")).
			WithHeaders(matchers.HeadersMatcher{
				"Accept":        []Matcher{S("application/json")},
				"Authorization": []Matcher{S("Bearer 123456789")},
			}).
			WillRespondWith(http.StatusNotFound).
			WithHeader("Content-Type", S("application/json")).
			WithJSONBody(Map{
				"message": Like("No results found"),
				"errors":  matchers.StructMatcher{},
			})

		executeTest(t, func(c *statuscake.Client) error {
			err := c.DeleteContactGroup(context.Background(), "2").Execute()
			return equal(err, statuscake.APIError{
				Status:  http.StatusNotFound,
				Message: "No results found",
				Errors:  map[string][]string{},
			})
		})
	})
}

func TestGetContactGroup(t *testing.T) {
	t.Run("returns a contact group on success", func(t *testing.T) {
		mockProvider.
			AddInteraction().
			Given(ProviderStateV3{
				Name: "An existing contact group",
			}).
			UponReceiving("A request to get a contact group").
			WithRequest(http.MethodGet, FromProviderState("/v1/contact-groups/${id}", "/v1/contact-groups/1")).
			WithHeaders(matchers.HeadersMatcher{
				"Accept":        []Matcher{S("application/json")},
				"Authorization": []Matcher{S("Bearer 123456789")},
			}).
			WillRespondWith(http.StatusOK).
			WithHeader("Content-Type", S("application/json")).
			WithJSONBody(Map{
				"data": matchers.StructMatcher{
					"id":              FromProviderState("${id}", "1"),
					"name":            Like("Operations Team"),
					"email_addresses": EachLike("johnsmith@example.com", 1),
					"integrations":    EachLike("1", 1),
					"mobile_numbers":  EachLike("447712345678", 1),
					"ping_url":        Like("https://ping.example.com"),
				},
			})

		executeTest(t, func(c *statuscake.Client) error {
			group, _ := c.GetContactGroup(context.Background(), "1").Execute()
			return equal(group.Data, statuscake.ContactGroup{
				ID:   "1",
				Name: "Operations Team",
				EmailAddresses: []string{
					"johnsmith@example.com",
				},
				Integrations: []string{
					"1",
				},
				MobileNumbers: []string{
					"447712345678",
				},
				PingURL: statuscake.PtrString("https://ping.example.com"),
			})
		})
	})

	t.Run("returns an error when the contact group does not exist", func(t *testing.T) {
		mockProvider.
			AddInteraction().
			UponReceiving("A request to get a contact group").
			WithRequest(http.MethodGet, S("/v1/contact-groups/2")).
			WithHeaders(matchers.HeadersMatcher{
				"Accept":        []Matcher{S("application/json")},
				"Authorization": []Matcher{S("Bearer 123456789")},
			}).
			WillRespondWith(http.StatusNotFound).
			WithHeader("Content-Type", S("application/json")).
			WithJSONBody(Map{
				"message": Like("No results found"),
				"errors":  matchers.StructMatcher{},
			})

		executeTest(t, func(c *statuscake.Client) error {
			_, err := c.GetContactGroup(context.Background(), "2").Execute()
			return equal(err, statuscake.APIError{
				Status:  http.StatusNotFound,
				Message: "No results found",
				Errors:  map[string][]string{},
			})
		})
	})
}

func TestListContactGroups(t *testing.T) {
	t.Run("returns a list of contact groups on success", func(t *testing.T) {
		mockProvider.
			AddInteraction().
			Given(ProviderStateV3{
				Name: "Existing contact groups",
			}).
			UponReceiving("A request to get a list of contact groups").
			WithRequest(http.MethodGet, S("/v1/contact-groups")).
			WithHeaders(matchers.HeadersMatcher{
				"Accept":        []Matcher{S("application/json")},
				"Authorization": []Matcher{S("Bearer 123456789")},
			}).
			WillRespondWith(http.StatusOK).
			WithHeader("Content-Type", S("application/json")).
			WithJSONBody(Map{
				"data": EachLike(
					matchers.StructMatcher{
						"id":              FromProviderState("${id}", "1"),
						"name":            Like("Operations Team"),
						"email_addresses": EachLike("johnsmith@example.com", 1),
						"integrations":    EachLike("1", 1),
						"mobile_numbers":  EachLike("447712345678", 1),
						"ping_url":        Like("https://ping.example.com"),
					}, 1,
				),
				"metadata": matchers.StructMatcher{
					"page":        Like(1),
					"per_page":    Like(25),
					"page_count":  Like(1),
					"total_count": Like(5),
				},
			})

		executeTest(t, func(c *statuscake.Client) error {
			groups, _ := c.ListContactGroups(context.Background()).Execute()
			return equal(groups.Data, []statuscake.ContactGroup{
				statuscake.ContactGroup{
					ID:   "1",
					Name: "Operations Team",
					EmailAddresses: []string{
						"johnsmith@example.com",
					},
					MobileNumbers: []string{
						"447712345678",
					},
					Integrations: []string{
						"1",
					},
					PingURL: statuscake.PtrString("https://ping.example.com"),
				},
			})
		})
	})

	t.Run("returns an empty list when there are no contact groups", func(t *testing.T) {
		mockProvider.
			AddInteraction().
			UponReceiving("A request to get a list of contact groups").
			WithRequest(http.MethodGet, S("/v1/contact-groups")).
			WithHeaders(matchers.HeadersMatcher{
				"Accept":        []Matcher{S("application/json")},
				"Authorization": []Matcher{S("Bearer 123456789")},
			}).
			WillRespondWith(http.StatusOK).
			WithHeader("Content-Type", S("application/json")).
			WithJSONBody(Map{
				"data": Like([]interface{}{}),
				"metadata": matchers.StructMatcher{
					"page":        Like(1),
					"per_page":    Like(25),
					"page_count":  Like(1),
					"total_count": 0,
				},
			})

		executeTest(t, func(c *statuscake.Client) error {
			groups, _ := c.ListContactGroups(context.Background()).Execute()
			return equal(groups.Data, []statuscake.ContactGroup{})
		})
	})
}

func TestUpdateContactGroup(t *testing.T) {
	t.Run("returns a no content status on success", func(t *testing.T) {
		mockProvider.
			AddInteraction().
			Given(ProviderStateV3{
				Name: "An existing contact group",
			}).
			UponReceiving("A request to update a contact group").
			WithRequest(http.MethodPut, FromProviderState("/v1/contact-groups/${id}", "/v1/contact-groups/1")).
			WithHeaders(matchers.HeadersMatcher{
				"Accept":        []Matcher{S("application/json")},
				"Authorization": []Matcher{S("Bearer 123456789")},
				"Content-Type":  []Matcher{S("application/x-www-form-urlencoded")},
			}).
			WithBody("application/x-www-form-urlencoded", []byte(
				"email_addresses%5B%5D=&"+
					"integrations%5B%5D=4&"+
					"integrations%5B%5D=5&"+
					"integrations%5B%5D=6&"+
					"mobile_numbers%5B%5D=447891998195&"+
					"name=Development+Team&"+
					"ping_url=https%3A%2F%2Fpong.example.com",
			)).
			WillRespondWith(http.StatusNoContent)

		executeTest(t, func(c *statuscake.Client) error {
			return c.UpdateContactGroup(context.Background(), "1").
				Name("Development Team").
				EmailAddresses([]string{}).
				Integrations([]string{
					"4",
					"5",
					"6",
				}).
				MobileNumbers([]string{
					"447891998195",
				}).
				PingURL("https://pong.example.com").
				Execute()
		})
	})

	t.Run("returns an error if the request fails", func(t *testing.T) {
		mockProvider.
			AddInteraction().
			Given(ProviderStateV3{
				Name: "An existing contact group",
			}).
			UponReceiving("A request to update an invalid contact group").
			WithRequest(http.MethodPut, FromProviderState("/v1/contact-groups/${id}", "/v1/contact-groups/1")).
			WithHeaders(matchers.HeadersMatcher{
				"Accept":        []Matcher{S("application/json")},
				"Authorization": []Matcher{S("Bearer 123456789")},
				"Content-Type":  []Matcher{S("application/x-www-form-urlencoded")},
			}).
			WithBody("application/x-www-form-urlencoded", []byte(
				"ping_url=this%2Cis%2Cnot%2Cvalid",
			)).
			WillRespondWith(http.StatusBadRequest).
			WithHeader("Content-Type", S("application/json")).
			WithJSONBody(Map{
				"message": Like("The provided parameters are invalid. Check the errors output for detailed information."),
				"errors": matchers.StructMatcher{
					"ping_url": EachLike("Ping Url is not a valid URL", 1),
				},
			})

		executeTest(t, func(c *statuscake.Client) error {
			err := c.UpdateContactGroup(context.Background(), "1").
				PingURL("this,is,not,valid").
				Execute()

			return equal(err, statuscake.APIError{
				Status:  http.StatusBadRequest,
				Message: "The provided parameters are invalid. Check the errors output for detailed information.",
				Errors: map[string][]string{
					"ping_url": []string{"Ping Url is not a valid URL"},
				},
			})
		})
	})

	t.Run("returns an error when the contact group does not exist", func(t *testing.T) {
		mockProvider.
			AddInteraction().
			UponReceiving("A request to update a contact group").
			WithRequest(http.MethodPut, S("/v1/contact-groups/2")).
			WithHeaders(matchers.HeadersMatcher{
				"Accept":        []Matcher{S("application/json")},
				"Authorization": []Matcher{S("Bearer 123456789")},
				"Content-Type":  []Matcher{S("application/x-www-form-urlencoded")},
			}).
			WithBody("application/x-www-form-urlencoded", []byte(
				"name=Development+Team",
			)).
			WillRespondWith(http.StatusNotFound).
			WithHeader("Content-Type", S("application/json")).
			WithJSONBody(Map{
				"message": Like("No results found"),
				"errors":  matchers.StructMatcher{},
			})

		executeTest(t, func(c *statuscake.Client) error {
			err := c.UpdateContactGroup(context.Background(), "2").
				Name("Development Team").
				Execute()

			return equal(err, statuscake.APIError{
				Status:  http.StatusNotFound,
				Message: "No results found",
				Errors:  map[string][]string{},
			})
		})
	})
}
