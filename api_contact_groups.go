/*
 * StatusCake API
 *
 * Copyright (c) 2021 StatusCake
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.0-beta.1
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package statuscake

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var _ context.Context

// ContactGroupsAPI describes the necessary methods to adhere to this interface.
type ContactGroupsAPI interface {
	CreateContactGroup(ctx context.Context) APICreateContactGroupRequest
	CreateContactGroupExecute(r APICreateContactGroupRequest) (APIResponse, error)
	DeleteContactGroup(ctx context.Context, groupId string) APIDeleteContactGroupRequest
	DeleteContactGroupExecute(r APIDeleteContactGroupRequest) error
	GetContactGroup(ctx context.Context, groupId string) APIGetContactGroupRequest
	GetContactGroupExecute(r APIGetContactGroupRequest) (ContactGroupResponse, error)
	ListContactGroups(ctx context.Context) APIListContactGroupsRequest
	ListContactGroupsExecute(r APIListContactGroupsRequest) (ContactGroups, error)
	UpdateContactGroup(ctx context.Context, groupId string) APIUpdateContactGroupRequest
	UpdateContactGroupExecute(r APIUpdateContactGroupRequest) error
}

// ContactGroupsService ContactGroups service.
type ContactGroupsService service

// APICreateContactGroupRequest represents a request type.
type APICreateContactGroupRequest struct {
	ctx               context.Context
	APIService        ContactGroupsAPI
	name              *string
	pingUrl           *string
	emailAddressesCsv *string
	mobileNumbersCsv  *string
	integrationsCsv   *string
}

// Name sets name on the request type.
func (r APICreateContactGroupRequest) Name(name string) APICreateContactGroupRequest {
	r.name = &name
	return r
}

// PingURL sets pingUrl on the request type.
func (r APICreateContactGroupRequest) PingURL(pingUrl string) APICreateContactGroupRequest {
	r.pingUrl = &pingUrl
	return r
}

// EmailAddresses sets emailAddressesCsv on the request type.
func (r APICreateContactGroupRequest) EmailAddresses(emailAddressesCsv []string) APICreateContactGroupRequest {
	r.emailAddressesCsv = PtrString(strings.Join(emailAddressesCsv, ","))
	return r
}

// MobileNumbers sets mobileNumbersCsv on the request type.
func (r APICreateContactGroupRequest) MobileNumbers(mobileNumbersCsv []string) APICreateContactGroupRequest {
	r.mobileNumbersCsv = PtrString(strings.Join(mobileNumbersCsv, ","))
	return r
}

// Integrations sets integrationsCsv on the request type.
func (r APICreateContactGroupRequest) Integrations(integrationsCsv []string) APICreateContactGroupRequest {
	r.integrationsCsv = PtrString(strings.Join(integrationsCsv, ","))
	return r
}

// Execute executes the request.
func (r APICreateContactGroupRequest) Execute() (APIResponse, error) {
	return r.APIService.CreateContactGroupExecute(r)
}

// CreateContactGroup Create a contact group.
func (a *ContactGroupsService) CreateContactGroup(ctx context.Context) APICreateContactGroupRequest {
	return APICreateContactGroupRequest{
		ctx:        ctx,
		APIService: a,
	}
}

// Execute executes the request.
func (a *ContactGroupsService) CreateContactGroupExecute(r APICreateContactGroupRequest) (APIResponse, error) {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
		returnValue          APIResponse
	)

	basePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactGroupsService.CreateContactGroup")
	if err != nil {
		return returnValue, err
	}

	requestPath := basePath + "/contact-groups"

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	if r.name == nil {
		return returnValue, errorf("name is required and must be specified")
	}

	// Determine the Content-Type header.
	contentTypes := []string{"application/x-www-form-urlencoded"}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	formParams.Add("name", parameterToString(*r.name))

	if r.pingUrl != nil {
		formParams.Add("ping_url", parameterToString(*r.pingUrl))
	}

	if r.emailAddressesCsv != nil {
		formParams.Add("email_addresses_csv", parameterToString(*r.emailAddressesCsv))
	}

	if r.mobileNumbersCsv != nil {
		formParams.Add("mobile_numbers_csv", parameterToString(*r.mobileNumbersCsv))
	}

	if r.integrationsCsv != nil {
		formParams.Add("integrations_csv", parameterToString(*r.integrationsCsv))
	}
	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodPost, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return returnValue, err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return returnValue, err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return returnValue, err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return returnValue, APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return returnValue, v
	}

	if err := a.client.decode(&returnValue, responseBody, responseContentType); err != nil {
		return returnValue, APIError{
			Status:  res.StatusCode,
			Message: "failed to deserialise response body",
			parent:  err,
		}
	}

	return returnValue, nil
}

// APIDeleteContactGroupRequest represents a request type.
type APIDeleteContactGroupRequest struct {
	ctx        context.Context
	APIService ContactGroupsAPI
	groupId    string
}

// Execute executes the request.
func (r APIDeleteContactGroupRequest) Execute() error {
	return r.APIService.DeleteContactGroupExecute(r)
}

// DeleteContactGroup Delete a contact group.
func (a *ContactGroupsService) DeleteContactGroup(ctx context.Context, groupId string) APIDeleteContactGroupRequest {
	return APIDeleteContactGroupRequest{
		ctx:        ctx,
		APIService: a,
		groupId:    groupId,
	}
}

// Execute executes the request.
func (a *ContactGroupsService) DeleteContactGroupExecute(r APIDeleteContactGroupRequest) error {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
	)

	basePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactGroupsService.DeleteContactGroup")
	if err != nil {
		return err
	}

	requestPath := basePath + "/contact-groups/{group_id}"
	requestPath = strings.Replace(requestPath, "{"+"group_id"+"}", url.PathEscape(parameterToString(r.groupId)), -1)

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	// Determine the Content-Type header.
	contentTypes := []string{}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodDelete, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return v
	}

	return nil
}

// APIGetContactGroupRequest represents a request type.
type APIGetContactGroupRequest struct {
	ctx        context.Context
	APIService ContactGroupsAPI
	groupId    string
}

// Execute executes the request.
func (r APIGetContactGroupRequest) Execute() (ContactGroupResponse, error) {
	return r.APIService.GetContactGroupExecute(r)
}

// GetContactGroup Retrieve a contact group.
func (a *ContactGroupsService) GetContactGroup(ctx context.Context, groupId string) APIGetContactGroupRequest {
	return APIGetContactGroupRequest{
		ctx:        ctx,
		APIService: a,
		groupId:    groupId,
	}
}

// Execute executes the request.
func (a *ContactGroupsService) GetContactGroupExecute(r APIGetContactGroupRequest) (ContactGroupResponse, error) {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
		returnValue          ContactGroupResponse
	)

	basePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactGroupsService.GetContactGroup")
	if err != nil {
		return returnValue, err
	}

	requestPath := basePath + "/contact-groups/{group_id}"
	requestPath = strings.Replace(requestPath, "{"+"group_id"+"}", url.PathEscape(parameterToString(r.groupId)), -1)

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	// Determine the Content-Type header.
	contentTypes := []string{}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodGet, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return returnValue, err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return returnValue, err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return returnValue, err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return returnValue, APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return returnValue, v
	}

	if err := a.client.decode(&returnValue, responseBody, responseContentType); err != nil {
		return returnValue, APIError{
			Status:  res.StatusCode,
			Message: "failed to deserialise response body",
			parent:  err,
		}
	}

	return returnValue, nil
}

// APIListContactGroupsRequest represents a request type.
type APIListContactGroupsRequest struct {
	ctx        context.Context
	APIService ContactGroupsAPI
}

// Execute executes the request.
func (r APIListContactGroupsRequest) Execute() (ContactGroups, error) {
	return r.APIService.ListContactGroupsExecute(r)
}

// ListContactGroups Get all contact groups.
func (a *ContactGroupsService) ListContactGroups(ctx context.Context) APIListContactGroupsRequest {
	return APIListContactGroupsRequest{
		ctx:        ctx,
		APIService: a,
	}
}

// Execute executes the request.
func (a *ContactGroupsService) ListContactGroupsExecute(r APIListContactGroupsRequest) (ContactGroups, error) {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
		returnValue          ContactGroups
	)

	basePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactGroupsService.ListContactGroups")
	if err != nil {
		return returnValue, err
	}

	requestPath := basePath + "/contact-groups"

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	// Determine the Content-Type header.
	contentTypes := []string{}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodGet, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return returnValue, err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return returnValue, err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return returnValue, err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return returnValue, APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return returnValue, v
	}

	if err := a.client.decode(&returnValue, responseBody, responseContentType); err != nil {
		return returnValue, APIError{
			Status:  res.StatusCode,
			Message: "failed to deserialise response body",
			parent:  err,
		}
	}

	return returnValue, nil
}

// APIUpdateContactGroupRequest represents a request type.
type APIUpdateContactGroupRequest struct {
	ctx               context.Context
	APIService        ContactGroupsAPI
	groupId           string
	name              *string
	pingUrl           *string
	emailAddressesCsv *string
	mobileNumbersCsv  *string
	integrationsCsv   *string
}

// Name sets name on the request type.
func (r APIUpdateContactGroupRequest) Name(name string) APIUpdateContactGroupRequest {
	r.name = &name
	return r
}

// PingURL sets pingUrl on the request type.
func (r APIUpdateContactGroupRequest) PingURL(pingUrl string) APIUpdateContactGroupRequest {
	r.pingUrl = &pingUrl
	return r
}

// EmailAddresses sets emailAddressesCsv on the request type.
func (r APIUpdateContactGroupRequest) EmailAddresses(emailAddressesCsv []string) APIUpdateContactGroupRequest {
	r.emailAddressesCsv = PtrString(strings.Join(emailAddressesCsv, ","))
	return r
}

// MobileNumbers sets mobileNumbersCsv on the request type.
func (r APIUpdateContactGroupRequest) MobileNumbers(mobileNumbersCsv []string) APIUpdateContactGroupRequest {
	r.mobileNumbersCsv = PtrString(strings.Join(mobileNumbersCsv, ","))
	return r
}

// Integrations sets integrationsCsv on the request type.
func (r APIUpdateContactGroupRequest) Integrations(integrationsCsv []string) APIUpdateContactGroupRequest {
	r.integrationsCsv = PtrString(strings.Join(integrationsCsv, ","))
	return r
}

// Execute executes the request.
func (r APIUpdateContactGroupRequest) Execute() error {
	return r.APIService.UpdateContactGroupExecute(r)
}

// UpdateContactGroup Update a contact group.
func (a *ContactGroupsService) UpdateContactGroup(ctx context.Context, groupId string) APIUpdateContactGroupRequest {
	return APIUpdateContactGroupRequest{
		ctx:        ctx,
		APIService: a,
		groupId:    groupId,
	}
}

// Execute executes the request.
func (a *ContactGroupsService) UpdateContactGroupExecute(r APIUpdateContactGroupRequest) error {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
	)

	basePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactGroupsService.UpdateContactGroup")
	if err != nil {
		return err
	}

	requestPath := basePath + "/contact-groups/{group_id}"
	requestPath = strings.Replace(requestPath, "{"+"group_id"+"}", url.PathEscape(parameterToString(r.groupId)), -1)

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	// Determine the Content-Type header.
	contentTypes := []string{"application/x-www-form-urlencoded"}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	if r.name != nil {
		formParams.Add("name", parameterToString(*r.name))
	}

	if r.pingUrl != nil {
		formParams.Add("ping_url", parameterToString(*r.pingUrl))
	}

	if r.emailAddressesCsv != nil {
		formParams.Add("email_addresses_csv", parameterToString(*r.emailAddressesCsv))
	}

	if r.mobileNumbersCsv != nil {
		formParams.Add("mobile_numbers_csv", parameterToString(*r.mobileNumbersCsv))
	}

	if r.integrationsCsv != nil {
		formParams.Add("integrations_csv", parameterToString(*r.integrationsCsv))
	}
	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodPut, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return v
	}

	return nil
}
