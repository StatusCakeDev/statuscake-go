/*
 * StatusCake API
 *
 * Copyright (c) 2021 StatusCake
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.0.0-beta.1
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package statuscake

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// Linger please
var _ context.Context

// PagespeedAPI describes the necessary methods to adhere to this interface.
type PagespeedAPI interface {
	CreatePagespeedTest(ctx context.Context) APICreatePagespeedTestRequest
	CreatePagespeedTestExecute(r APICreatePagespeedTestRequest) (APIResponse, error)
	DeletePagespeedTest(ctx context.Context, testId string) APIDeletePagespeedTestRequest
	DeletePagespeedTestExecute(r APIDeletePagespeedTestRequest) error
	GetPagespeedTest(ctx context.Context, testId string) APIGetPagespeedTestRequest
	GetPagespeedTestExecute(r APIGetPagespeedTestRequest) (PagespeedTestResponse, error)
	ListPagespeedTestHistory(ctx context.Context, testId string) APIListPagespeedTestHistoryRequest
	ListPagespeedTestHistoryExecute(r APIListPagespeedTestHistoryRequest) (PagespeedTestHistory, error)
	ListPagespeedTests(ctx context.Context) APIListPagespeedTestsRequest
	ListPagespeedTestsExecute(r APIListPagespeedTestsRequest) (PagespeedTests, error)
	UpdatePagespeedTest(ctx context.Context, testId string) APIUpdatePagespeedTestRequest
	UpdatePagespeedTestExecute(r APIUpdatePagespeedTestRequest) error
}

// PagespeedService Pagespeed service.
type PagespeedService service

// APICreatePagespeedTestRequest represents a request type.
type APICreatePagespeedTestRequest struct {
	ctx              context.Context
	APIService       PagespeedAPI
	name             *string
	websiteUrl       *string
	locationIso      *PagespeedTestLocationISO
	checkRate        *PagespeedTestCheckRate
	alertBigger      *int32
	alertSlower      *int64
	alertSmaller     *int32
	contactGroupsCsv *string
	paused           *bool
}

// Name sets name on the request type.
func (r APICreatePagespeedTestRequest) Name(name string) APICreatePagespeedTestRequest {
	r.name = &name
	return r
}

// WebsiteURL sets websiteUrl on the request type.
func (r APICreatePagespeedTestRequest) WebsiteURL(websiteUrl string) APICreatePagespeedTestRequest {
	r.websiteUrl = &websiteUrl
	return r
}

// LocationISO sets locationIso on the request type.
func (r APICreatePagespeedTestRequest) LocationISO(locationIso PagespeedTestLocationISO) APICreatePagespeedTestRequest {
	r.locationIso = &locationIso
	return r
}

// CheckRate sets checkRate on the request type.
func (r APICreatePagespeedTestRequest) CheckRate(checkRate PagespeedTestCheckRate) APICreatePagespeedTestRequest {
	r.checkRate = &checkRate
	return r
}

// AlertBigger sets alertBigger on the request type.
func (r APICreatePagespeedTestRequest) AlertBigger(alertBigger int32) APICreatePagespeedTestRequest {
	r.alertBigger = &alertBigger
	return r
}

// AlertSlower sets alertSlower on the request type.
func (r APICreatePagespeedTestRequest) AlertSlower(alertSlower int64) APICreatePagespeedTestRequest {
	r.alertSlower = &alertSlower
	return r
}

// AlertSmaller sets alertSmaller on the request type.
func (r APICreatePagespeedTestRequest) AlertSmaller(alertSmaller int32) APICreatePagespeedTestRequest {
	r.alertSmaller = &alertSmaller
	return r
}

// ContactGroups sets contactGroupsCsv on the request type.
func (r APICreatePagespeedTestRequest) ContactGroups(contactGroupsCsv []string) APICreatePagespeedTestRequest {
	r.contactGroupsCsv = PtrString(strings.Join(contactGroupsCsv, ","))
	return r
}

// Paused sets paused on the request type.
func (r APICreatePagespeedTestRequest) Paused(paused bool) APICreatePagespeedTestRequest {
	r.paused = &paused
	return r
}

// Execute executes the request.
func (r APICreatePagespeedTestRequest) Execute() (APIResponse, error) {
	return r.APIService.CreatePagespeedTestExecute(r)
}

// CreatePagespeedTest Create a pagespeed test.
func (a *PagespeedService) CreatePagespeedTest(ctx context.Context) APICreatePagespeedTestRequest {
	return APICreatePagespeedTestRequest{
		ctx:        ctx,
		APIService: a,
	}
}

// Execute executes the request.
func (a *PagespeedService) CreatePagespeedTestExecute(r APICreatePagespeedTestRequest) (APIResponse, error) {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
		returnValue          APIResponse
	)

	basePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PagespeedService.CreatePagespeedTest")
	if err != nil {
		return returnValue, err
	}

	requestPath := basePath + "/pagespeed"

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	if r.name == nil {
		return returnValue, errorf("name is required and must be specified")
	}

	if r.websiteUrl == nil {
		return returnValue, errorf("websiteUrl is required and must be specified")
	}

	if r.locationIso == nil {
		return returnValue, errorf("locationIso is required and must be specified")
	}

	if r.checkRate == nil {
		return returnValue, errorf("checkRate is required and must be specified")
	}

	// Determine the Content-Type header.
	contentTypes := []string{"application/x-www-form-urlencoded"}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	formParams.Add("name", parameterToString(*r.name))
	formParams.Add("website_url", parameterToString(*r.websiteUrl))
	formParams.Add("location_iso", parameterToString(*r.locationIso))
	formParams.Add("check_rate", parameterToString(*r.checkRate))

	if r.alertBigger != nil {
		formParams.Add("alert_bigger", parameterToString(*r.alertBigger))
	}

	if r.alertSlower != nil {
		formParams.Add("alert_slower", parameterToString(*r.alertSlower))
	}

	if r.alertSmaller != nil {
		formParams.Add("alert_smaller", parameterToString(*r.alertSmaller))
	}

	if r.contactGroupsCsv != nil {
		formParams.Add("contact_groups_csv", parameterToString(*r.contactGroupsCsv))
	}

	if r.paused != nil {
		formParams.Add("paused", parameterToString(*r.paused))
	}
	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodPost, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return returnValue, err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return returnValue, err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return returnValue, err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return returnValue, APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return returnValue, v
	}

	if err := a.client.decode(&returnValue, responseBody, responseContentType); err != nil {
		return returnValue, APIError{
			Status:  res.StatusCode,
			Message: "failed to deserialise response body",
			parent:  err,
		}
	}

	return returnValue, nil
}

// APIDeletePagespeedTestRequest represents a request type.
type APIDeletePagespeedTestRequest struct {
	ctx        context.Context
	APIService PagespeedAPI
	testId     string
}

// Execute executes the request.
func (r APIDeletePagespeedTestRequest) Execute() error {
	return r.APIService.DeletePagespeedTestExecute(r)
}

// DeletePagespeedTest Delete a pagespeed test.
func (a *PagespeedService) DeletePagespeedTest(ctx context.Context, testId string) APIDeletePagespeedTestRequest {
	return APIDeletePagespeedTestRequest{
		ctx:        ctx,
		APIService: a,
		testId:     testId,
	}
}

// Execute executes the request.
func (a *PagespeedService) DeletePagespeedTestExecute(r APIDeletePagespeedTestRequest) error {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
	)

	basePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PagespeedService.DeletePagespeedTest")
	if err != nil {
		return err
	}

	requestPath := basePath + "/pagespeed/{test_id}"
	requestPath = strings.Replace(requestPath, "{"+"test_id"+"}", url.PathEscape(parameterToString(r.testId)), -1)

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	// Determine the Content-Type header.
	contentTypes := []string{}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodDelete, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return v
	}

	return nil
}

// APIGetPagespeedTestRequest represents a request type.
type APIGetPagespeedTestRequest struct {
	ctx        context.Context
	APIService PagespeedAPI
	testId     string
}

// Execute executes the request.
func (r APIGetPagespeedTestRequest) Execute() (PagespeedTestResponse, error) {
	return r.APIService.GetPagespeedTestExecute(r)
}

// GetPagespeedTest Retrieve a pagespeed test.
func (a *PagespeedService) GetPagespeedTest(ctx context.Context, testId string) APIGetPagespeedTestRequest {
	return APIGetPagespeedTestRequest{
		ctx:        ctx,
		APIService: a,
		testId:     testId,
	}
}

// Execute executes the request.
func (a *PagespeedService) GetPagespeedTestExecute(r APIGetPagespeedTestRequest) (PagespeedTestResponse, error) {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
		returnValue          PagespeedTestResponse
	)

	basePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PagespeedService.GetPagespeedTest")
	if err != nil {
		return returnValue, err
	}

	requestPath := basePath + "/pagespeed/{test_id}"
	requestPath = strings.Replace(requestPath, "{"+"test_id"+"}", url.PathEscape(parameterToString(r.testId)), -1)

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	// Determine the Content-Type header.
	contentTypes := []string{}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodGet, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return returnValue, err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return returnValue, err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return returnValue, err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return returnValue, APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return returnValue, v
	}

	if err := a.client.decode(&returnValue, responseBody, responseContentType); err != nil {
		return returnValue, APIError{
			Status:  res.StatusCode,
			Message: "failed to deserialise response body",
			parent:  err,
		}
	}

	return returnValue, nil
}

// APIListPagespeedTestHistoryRequest represents a request type.
type APIListPagespeedTestHistoryRequest struct {
	ctx        context.Context
	APIService PagespeedAPI
	testId     string
	days       *int32
}

// Days sets days on the request type.
func (r APIListPagespeedTestHistoryRequest) Days(days int32) APIListPagespeedTestHistoryRequest {
	r.days = &days
	return r
}

// Execute executes the request.
func (r APIListPagespeedTestHistoryRequest) Execute() (PagespeedTestHistory, error) {
	return r.APIService.ListPagespeedTestHistoryExecute(r)
}

// ListPagespeedTestHistory Get all pagespeed test history.
func (a *PagespeedService) ListPagespeedTestHistory(ctx context.Context, testId string) APIListPagespeedTestHistoryRequest {
	return APIListPagespeedTestHistoryRequest{
		ctx:        ctx,
		APIService: a,
		testId:     testId,
	}
}

// Execute executes the request.
func (a *PagespeedService) ListPagespeedTestHistoryExecute(r APIListPagespeedTestHistoryRequest) (PagespeedTestHistory, error) {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
		returnValue          PagespeedTestHistory
	)

	basePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PagespeedService.ListPagespeedTestHistory")
	if err != nil {
		return returnValue, err
	}

	requestPath := basePath + "/pagespeed/{test_id}/history"
	requestPath = strings.Replace(requestPath, "{"+"test_id"+"}", url.PathEscape(parameterToString(r.testId)), -1)

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	if r.days != nil {
		queryParams.Add("days", parameterToString(*r.days))
	}
	// Determine the Content-Type header.
	contentTypes := []string{}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodGet, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return returnValue, err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return returnValue, err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return returnValue, err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return returnValue, APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return returnValue, v
	}

	if err := a.client.decode(&returnValue, responseBody, responseContentType); err != nil {
		return returnValue, APIError{
			Status:  res.StatusCode,
			Message: "failed to deserialise response body",
			parent:  err,
		}
	}

	return returnValue, nil
}

// APIListPagespeedTestsRequest represents a request type.
type APIListPagespeedTestsRequest struct {
	ctx        context.Context
	APIService PagespeedAPI
}

// Execute executes the request.
func (r APIListPagespeedTestsRequest) Execute() (PagespeedTests, error) {
	return r.APIService.ListPagespeedTestsExecute(r)
}

// ListPagespeedTests Get all pagespeed tests.
func (a *PagespeedService) ListPagespeedTests(ctx context.Context) APIListPagespeedTestsRequest {
	return APIListPagespeedTestsRequest{
		ctx:        ctx,
		APIService: a,
	}
}

// Execute executes the request.
func (a *PagespeedService) ListPagespeedTestsExecute(r APIListPagespeedTestsRequest) (PagespeedTests, error) {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
		returnValue          PagespeedTests
	)

	basePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PagespeedService.ListPagespeedTests")
	if err != nil {
		return returnValue, err
	}

	requestPath := basePath + "/pagespeed"

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	// Determine the Content-Type header.
	contentTypes := []string{}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodGet, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return returnValue, err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return returnValue, err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return returnValue, err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return returnValue, APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return returnValue, v
	}

	if err := a.client.decode(&returnValue, responseBody, responseContentType); err != nil {
		return returnValue, APIError{
			Status:  res.StatusCode,
			Message: "failed to deserialise response body",
			parent:  err,
		}
	}

	return returnValue, nil
}

// APIUpdatePagespeedTestRequest represents a request type.
type APIUpdatePagespeedTestRequest struct {
	ctx              context.Context
	APIService       PagespeedAPI
	testId           string
	name             *string
	locationIso      *PagespeedTestLocationISO
	checkRate        *PagespeedTestCheckRate
	alertBigger      *int32
	alertSlower      *int64
	alertSmaller     *int32
	contactGroupsCsv *string
	paused           *bool
}

// Name sets name on the request type.
func (r APIUpdatePagespeedTestRequest) Name(name string) APIUpdatePagespeedTestRequest {
	r.name = &name
	return r
}

// LocationISO sets locationIso on the request type.
func (r APIUpdatePagespeedTestRequest) LocationISO(locationIso PagespeedTestLocationISO) APIUpdatePagespeedTestRequest {
	r.locationIso = &locationIso
	return r
}

// CheckRate sets checkRate on the request type.
func (r APIUpdatePagespeedTestRequest) CheckRate(checkRate PagespeedTestCheckRate) APIUpdatePagespeedTestRequest {
	r.checkRate = &checkRate
	return r
}

// AlertBigger sets alertBigger on the request type.
func (r APIUpdatePagespeedTestRequest) AlertBigger(alertBigger int32) APIUpdatePagespeedTestRequest {
	r.alertBigger = &alertBigger
	return r
}

// AlertSlower sets alertSlower on the request type.
func (r APIUpdatePagespeedTestRequest) AlertSlower(alertSlower int64) APIUpdatePagespeedTestRequest {
	r.alertSlower = &alertSlower
	return r
}

// AlertSmaller sets alertSmaller on the request type.
func (r APIUpdatePagespeedTestRequest) AlertSmaller(alertSmaller int32) APIUpdatePagespeedTestRequest {
	r.alertSmaller = &alertSmaller
	return r
}

// ContactGroups sets contactGroupsCsv on the request type.
func (r APIUpdatePagespeedTestRequest) ContactGroups(contactGroupsCsv []string) APIUpdatePagespeedTestRequest {
	r.contactGroupsCsv = PtrString(strings.Join(contactGroupsCsv, ","))
	return r
}

// Paused sets paused on the request type.
func (r APIUpdatePagespeedTestRequest) Paused(paused bool) APIUpdatePagespeedTestRequest {
	r.paused = &paused
	return r
}

// Execute executes the request.
func (r APIUpdatePagespeedTestRequest) Execute() error {
	return r.APIService.UpdatePagespeedTestExecute(r)
}

// UpdatePagespeedTest Update a pagespeed test.
func (a *PagespeedService) UpdatePagespeedTest(ctx context.Context, testId string) APIUpdatePagespeedTestRequest {
	return APIUpdatePagespeedTestRequest{
		ctx:        ctx,
		APIService: a,
		testId:     testId,
	}
}

// Execute executes the request.
func (a *PagespeedService) UpdatePagespeedTestExecute(r APIUpdatePagespeedTestRequest) error {
	var (
		requestBody          interface{}
		requestFormFieldName string
		requestFileName      string
		requestFileBytes     []byte
	)

	basePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PagespeedService.UpdatePagespeedTest")
	if err != nil {
		return err
	}

	requestPath := basePath + "/pagespeed/{test_id}"
	requestPath = strings.Replace(requestPath, "{"+"test_id"+"}", url.PathEscape(parameterToString(r.testId)), -1)

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}

	// Determine the Content-Type header.
	contentTypes := []string{"application/x-www-form-urlencoded"}

	// Set Content-Type header
	requestContentTypeHeader := selectHeaderContentType(contentTypes)
	if requestContentTypeHeader != "" {
		headerParams["Content-Type"] = requestContentTypeHeader
	}

	// Determine the Accept header.
	accepts := []string{"application/json"}

	// Set Accept header.
	requestAcceptHeader := selectHeaderAccept(accepts)
	if requestAcceptHeader != "" {
		headerParams["Accept"] = requestAcceptHeader
	}

	if r.name != nil {
		formParams.Add("name", parameterToString(*r.name))
	}

	if r.locationIso != nil {
		formParams.Add("location_iso", parameterToString(*r.locationIso))
	}

	if r.checkRate != nil {
		formParams.Add("check_rate", parameterToString(*r.checkRate))
	}

	if r.alertBigger != nil {
		formParams.Add("alert_bigger", parameterToString(*r.alertBigger))
	}

	if r.alertSlower != nil {
		formParams.Add("alert_slower", parameterToString(*r.alertSlower))
	}

	if r.alertSmaller != nil {
		formParams.Add("alert_smaller", parameterToString(*r.alertSmaller))
	}

	if r.contactGroupsCsv != nil {
		formParams.Add("contact_groups_csv", parameterToString(*r.contactGroupsCsv))
	}

	if r.paused != nil {
		formParams.Add("paused", parameterToString(*r.paused))
	}
	req, err := a.client.prepareRequest(r.ctx, requestPath, http.MethodPut, requestBody, headerParams, queryParams, formParams, requestFormFieldName, requestFileName, requestFileBytes)
	if err != nil {
		return err
	}

	res, err := a.client.callAPI(req)
	if err != nil || res == nil {
		return err
	}

	responseBody, err := ioutil.ReadAll(res.Body)
	res.Body.Close()
	res.Body = ioutil.NopCloser(bytes.NewBuffer(responseBody))
	if err != nil {
		return err
	}

	responseContentType := res.Header.Get("Content-Type")

	if res.StatusCode >= 300 {
		var v APIError
		if err := a.client.decode(&v, responseBody, responseContentType); err != nil {
			return APIError{
				Status:  res.StatusCode,
				Message: "failed to deserialise error response",
				parent:  err,
			}
		}
		v.Status = res.StatusCode
		return v
	}

	return nil
}
