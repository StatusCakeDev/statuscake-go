/*
 * StatusCake API
 *
 * Copyright (c) 2023
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * API version: 1.2.0
 * Contact: support@statuscake.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package credentials

import "net/http"

const authorisationHeaderName = "Authorization"

type tokenFunc func(r *http.Request) string

// Bearer defines an authentication mechanism that attaches bearer token
// security credentials to each request.
type Bearer struct {
	header string
	token  tokenFunc
}

// NewBearer returns a value describing authentication credentials for a HTTP
// request.
func NewBearer(token tokenFunc) *Bearer {
	return &Bearer{
		header: authorisationHeaderName,
		token:  token,
	}
}

// NewBearerWithStaticToken returns a value describing authentication
// credentials for a HTTP request.
func NewBearerWithStaticToken(token string) *Bearer {
	return &Bearer{
		header: authorisationHeaderName,
		token: func(r *http.Request) string {
			return token
		},
	}
}

// SetHeader allows for the bearer authentication scheme to be used with
// a non-default header.
func (c *Bearer) SetHeader(header string) {
	c.header = header
}

// AddCredentials includes the bearer authentication credentials within a HTTP
// request.
func (c *Bearer) AddCredentials(r *http.Request) *http.Request {
	r.Header.Set(c.header, "Bearer "+c.token(r))
	return r
}
